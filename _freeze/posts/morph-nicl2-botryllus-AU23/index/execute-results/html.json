{
  "hash": "e59441023d5c83f902acf0a06dfe4d39",
  "result": {
    "markdown": "---\ntitle: \"Morphometric NiCl2 Data\"\nauthor: \"Celeste Valdivia\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(hrbrthemes)\nlibrary(ggplot2)\nlibrary(car)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: carData\n\nAttaching package: 'car'\n\nThe following object is masked from 'package:dplyr':\n\n    recode\n\nThe following object is masked from 'package:purrr':\n\n    some\n```\n:::\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\nlibrary(ggpubr)\nknitr::opts_chunk$set(echo = TRUE,\n                      eval = FALSE)\n```\n:::\n\n\n# Reading in Data\n\nMake sure you have made your Google sheet publicly available to anyone that has the link. If you make any updates to the sheet just re-curl the data, meaning just re-run the code below.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -L https://docs.google.com/spreadsheets/d/10uM3N3PD9xIP4yUnadfhkcXa8TPMRMD-adOIKbmkYzY/export?exportFormat=csv | tee ~/Documents/GitHub/Git/bestblogever/posts/morph-nicl2-botryllus-AU23/data/morph.csv\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmorph <- read.csv(file = \"data/morph.csv\")  \n```\n:::\n\n\n# Cleaning up Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmorph$date <- mdy(morph$date) #convert the date column from characters to true date\n\nmorph <- morph %>%\n  separate(jar_id, c(\"treatment_mg_per_L\", \"replicate\"), sep = \"-\") #create two new columns, treatment and replicate from jar id \n\nmorph_fact <- morph %>%\n  mutate(treatment_mg_per_L = as.factor(treatment_mg_per_L)) %>%\n  mutate(stage = as.factor(stage)) %>%\n  mutate(animal_id = as.factor(animal_id)) %>%\n  mutate(date = as.factor(date)) %>%\n  mutate(treatment_order = factor(paste(treatment_mg_per_L, animal_id))) # Create a new variable for ordering by treatment\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(morph_fact)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the mean health score binned by hours post-exposure and by treatment\nmean_health_score <- morph_fact %>%\n  group_by(hpe, treatment_mg_per_L) %>%\n  summarise(mean_health = round(mean(health, na.rm = TRUE)))\n\n# Calculate SD\nSD_health_score <- morph_fact %>%\n  group_by(hpe, treatment_mg_per_L) %>%\n  summarise(SD_health = round(sd(health, na.rm = TRUE)))\n\nn <- 14\n\nSE_health_score <- SD_health_score$SD_health/ sqrt(n)\n# Print the calculated mean health scores\nprint(mean_health_score)\nprint(SE_health_score)\n\n# To visualize the mean health scores using ggplot2\nggplot(mean_health_score, aes(x = hpe, y = mean_health, color = treatment_mg_per_L)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Mean Health Score by Days Post-Exposure and Treatment\",\n       x = \"Hours Post-Exposure\",\n       y = \"Mean Health Score\",\n       color = \"Concentration of Nickel Chloride (mg/L)\") +\n  theme_minimal()\n```\n:::\n\n\nJust the plot alone with no added significance bars and not adjusted for printing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the clustered bar graph\nggplot(mean_health_score, aes(x = factor(hpe), y = mean_health, fill = as.factor(treatment_mg_per_L))) +\n  geom_bar(stat = \"identity\", position = \"dodge\", width = 0.8) +\nscale_fill_brewer(palette = \"Green\", name = \"Nickel Chloride (mg/L)\", \n                    labels = c(\"0\" = \"0\", \"05\" = \"5\", \"45\" = \"45\")) +\n  labs(title = \"Health Score by Hours Post-Exposure and Treatment\",\n       x = \"Hours Post-Exposure\",\n       y = \"Health Score\") +\n  theme_minimal() +\n  scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10), limits = c(0, 10))\n```\n:::\n\n\n# Statistically evaluate differences in health score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Convert Treatment and HoursPostExposure to factors if they are not already factors\nmorph_fact$treatment_mg_per_L <- as.factor(morph_fact$treatment_mg_per_L)\nmorph_fact$hpe <- as.factor(morph_fact$hpe)\n\n\n## Perform one-way ANOVA\nanova_result <- aov(health ~ treatment_mg_per_L + hpe + treatment_mg_per_L:hpe , data = morph_fact)\n\n# Summarize the ANOVA results\nsummary(anova_result)\n\n\n## Meeting the ANOVA assumptions\nleveneTest(health ~ treatment_mg_per_L*hpe, data = morph_fact)\n#p-value > 0.05, therefore equal-variances are met\n\n# Check normality of residuals using Shapiro-Wilk test\nshapiro_test <- shapiro.test(residuals(anova_result))\nprint(shapiro_test)\n#meets assumption of normality, p value > 0.05\n\n## Perform Tukey's HSD test for significant interaction\n\ntukey_result <- TukeyHSD(x= anova_result, ordered = TRUE, conf.level = 0.95)\nprint(tukey_result)\n```\n:::\n\n\nPrinting out a png image of graph. Make sure to adjust pixel dimensions for the ideal DPI and desired printing size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng(filename = \"bar_plot.png\", width = 800, height = 800) # good for making a 3x3 in image for printing ~150 dpi\n\n# Add significance bars based on specific comparisons\nggplot(mean_health_score, aes(x = factor(hpe), y = mean_health, fill = as.factor(treatment_mg_per_L))) +\n  geom_bar(stat = \"identity\", position = \"dodge\", width = 0.8) +\nscale_fill_brewer(palette = \"Dark2\", name = \"Treatment\", \n                    labels = c(\"0\" = \"Control\", \"05\" = \"5 mg/L\", \"45\" = \"45 mg/L\")) +\n  labs(\n       x = \"Hours Post-Exposure\",\n       y = \"Mean Health Score\", ) +\n  theme_minimal() +\n  scale_y_continuous(breaks = c(0, 5, 10), limits = c(0, 10)) +\n  geom_errorbar(aes(ymin=mean_health_score$mean_health-SE_health_score, ymax=mean_health_score$mean_health+SE_health_score), width=.2,\n                 position=position_dodge(0.81)) +\n  theme(panel.grid.major.x = element_blank(),  # Remove major vertical gridlines\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(color = \"darkgrey\", size = 1),\n        panel.grid.minor.y = element_line(color = \"darkgrey\", size = 0.5), \n        axis.text=element_text(size=30),\n        axis.title=element_text(size=40),\n        legend.text = element_text(size = 40),\n        legend.title = element_text(size = 40)) + # Adjust the font size of the legend text \n  geom_text(aes(x = 1.98, y = 9.25, label = \"**\"), size = 14, vjust = -0.5) +  # Asterisk for significant difference at 24 hours for Control vs. 45 mg/L\n    geom_segment(aes(x = 1.65, xend = 2.27, y = 9.5, yend = 9.5), linetype = \"dashed\", size = 1 ) +  # Line below the asterisk for Control vs. 45 mg/L\n  geom_segment(aes(x = 2.27, xend = 2.27, y = 6.7, yend = 9.5), linetype = \"dashed\", size = 1 ) +\n  geom_segment(aes(x = 1.65, xend = 1.65, y = 8.4, yend = 9.5), linetype = \"dashed\", size = 1 ) +\n  geom_text(aes(x = 1.9, y = 8.25, label = \"**\"), size = 14, vjust = -0.5) +   #asterisk for significant difference at 24 hours for control vs 5 mg/L \n  geom_segment(aes(x = 1.8, xend = 2, y = 8.5, yend = 8.5), linetype = \"dashed\", size = 1 ) +\n  geom_segment(aes(x = 1.8, xend = 1.8, y = 8.4, yend = 8.5), linetype = \"dashed\", size = 1 ) +\n  geom_segment(aes(x = 2, xend = 2, y = 6.5, yend = 8.5), linetype = \"dashed\", size = 1 )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmorph_fact_24hpe <- morph_fact$\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}