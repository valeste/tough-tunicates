{
  "hash": "8594e94004aeb49243dfbfb7d6c999e6",
  "result": {
    "markdown": "---\ntitle: \"Nickel Impacts on Primary Epithelial Cell Cultures of *Botryllus schlosseri*\"\nsubtitle: \"Analysis of pilot study.\"\nauthor: \"Celeste Valdivia\"\nimage: \"line_percnet_output.png\"\ndate: \"2023-12-24\"\ncategories: [nickel chloride, primary cultures, epithelial]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(hrbrthemes)\nlibrary(ggplot2)\nlibrary(car)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: carData\n\nAttaching package: 'car'\n\nThe following object is masked from 'package:dplyr':\n\n    recode\n\nThe following object is masked from 'package:purrr':\n\n    some\n```\n:::\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\nlibrary(ggpubr)\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n# Objective and Background \n\nData below was collected from a pilot study conducted in Autumn 2023 where field-collected individual *Botryllus schlosseri* were exposed to a low and high treatment of nickel chloride and then were dissected for primary buds. The objective was to evaluate if a pre-nickel exposure in *Botryllus* improved primary epithelial cell monolayer proliferation. Refer to [Pilot 1.1 Nickel Exposure](https://valeste.github.io/tough-tunicates/posts/nicl2-botryllus-pilot/) notebook post for experimental design details.\n\n# Retrieving Data from Google Sheets\n\nNote, if you do this, make sure your spreadsheet is publicly available to anyone with a link.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -L https://docs.google.com/spreadsheets/d/13o7wsaFG9QAbBtIo31XtbfPtFOcf5HUEEYDksrcqaok/export?exportFormat=csv | tee ~/Documents/GitHub/Git/bestblogever/posts/cell-nicl2-botryllus-AU23/data/cell.csv\n```\n:::\n\n\nRead in the data to your local R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncell <- read.csv(file = \"data/cell.csv\")  \n```\n:::\n\n\n# Cleaning up Data\n\nDuring the study, we documented blastogenic stage with the 7 level blastogenic stage scale For simplicity in our graphs and our interpretation, we will be being the stages into a 4 level blastogenic stage scale\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a new column 'simple_stage' based on conditions\ncell <- cell %>%\n  mutate(simple_stage = case_when(\n    stage_at_dissection %in% c(\"A1\", \"A2\") ~ \"A\",\n    stage_at_dissection %in% c(\"B1\", \"B2\") ~ \"B\",\n    stage_at_dissection %in% c(\"C1\", \"C2\") ~ \"C\",\n    stage_at_dissection == \"TO\" ~ \"TO\",\n    TRUE ~ NA_character_  # This will handle any other cases or return NA if none match\n  ))\n```\n:::\n\n\nCleaning up and subsetting data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncell$date <- mdy(cell$date) #convert the date column from characters to true date\n\ncell_pilot <- cell[cell$experiment == 0, ] # only want the pilot experiment, experiment 1 failed in poor dissecting technique\n\n# Subset the 'cell_pilot' data frame to include rows with hours post seeding (hps) values of 0, 18, 38, and 70 hps.\n\ncell_pilot2 <- cell_pilot[cell_pilot$hps %in% c(0, 18, 38, 70), ]\n\n# Set the treatment, animal ID, and date as factors.\ncell_fact <- cell_pilot2 %>%\n  mutate(treatment_mg_per_L = as.factor(treatment_mg_per_L)) %>%\n  mutate(animal_ID = as.factor(animal_ID)) %>%\n  mutate(date = as.factor(date))\n\n\nsummary(cell_fact)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         date      experiment  plate_Number well_Placements   \n 2023-09-30:12   Min.   :0    Min.   :1     Length:48         \n 2023-10-01:12   1st Qu.:0    1st Qu.:1     Class :character  \n 2023-10-02:12   Median :0    Median :1     Mode  :character  \n 2023-10-03:12   Mean   :0    Mean   :1                       \n                 3rd Qu.:0    3rd Qu.:1                       \n                 Max.   :0    Max.   :1                       \n                                                              \n treatment_mg_per_L  replicate            animal_ID    stage_2         \n 0 :16              Length:48          S147C001: 4   Length:48         \n 5 :16              Class :character   S148C001: 4   Class :character  \n 45:16              Mode  :character   S149C001: 4   Mode  :character  \n                                       S151C001: 4                     \n                                       S154C001: 4                     \n                                       S158C001: 4                     \n                                       (Other) :24                     \n stage_at_dissection   initials              hps       no_attached_tissue\n Length:48           Length:48          Min.   : 0.0   Min.   : 1.000    \n Class :character    Class :character   1st Qu.:13.5   1st Qu.: 4.750    \n Mode  :character    Mode  :character   Median :28.0   Median : 5.000    \n                                        Mean   :31.5   Mean   : 5.646    \n                                        3rd Qu.:46.0   3rd Qu.: 7.000    \n                                        Max.   :70.0   Max.   :10.000    \n                                                                         \n  no_mono_out       image           percent_media_replaced  tissue_total   \n Min.   :0.000   Length:48          Min.   :  0            Min.   : 2.000  \n 1st Qu.:0.000   Class :character   1st Qu.:  0            1st Qu.: 5.000  \n Median :0.000   Mode  :character   Median :  0            Median : 7.000  \n Mean   :0.375                      Mean   : 25            Mean   : 6.583  \n 3rd Qu.:1.000                      3rd Qu.: 25            3rd Qu.: 8.000  \n Max.   :1.000                      Max.   :100            Max.   :10.000  \n                                                                           \n  prim_bud_no       zooid_no        float_prim      float_zooid    \n Min.   :0.000   Min.   : 0.000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:1.500   1st Qu.: 0.000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :2.000   Median : 0.000   Median :1.0000   Median :0.0000  \n Mean   :3.745   Mean   : 2.574   Mean   :0.7234   Mean   :0.2766  \n 3rd Qu.:6.000   3rd Qu.: 6.000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :8.000   Max.   :10.000   Max.   :3.0000   Max.   :1.0000  \n NA's   :1       NA's   :1        NA's   :1        NA's   :1       \n   comments         simple_stage      \n Length:48          Length:48         \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n```\n:::\n:::\n\n\nCalculate the percent of monolayer output per seeded tissue piece based on the first 12 rows of 'attached_tissue'. Here we are calculating the amount of monolayers that occurred relative to the amount of originally seeded tissue. Overtime, seeded tissue detaches and is removed from the plate so if you were to calculate this ratio per day it would be off. If using this, make sure the data frame is in order from A1-C4 wells otherwise it's miscalculated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercent_output <- ((cell_fact$no_mono_out) / head(cell_fact$no_attached_tissue, 12)) * 100\n\n# Add the newly calculated percent output values to the old data frame\ncell_fact <- cbind(cell_fact,percent_output)\n\n# Create a new data frame 'cell_fact_filtered' excluding rows with 'C2' and 'C4' in 'stage_at_dissection'\ncell_fact_filtered <- cell_fact[!(cell_fact$well_Placements %in% c(\"C2\")), ]\n```\n:::\n\n\n# Summary Statistics\n\nNumber of tissue pieces attached:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the mean attached tissue\nmean_tissue_attached <- cell_fact_filtered %>%\n  group_by(hps, treatment_mg_per_L, simple_stage) %>%\n  summarise(mean_attached = round(mean(no_attached_tissue, na.rm = TRUE)),\n            num_points = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'hps', 'treatment_mg_per_L'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# Calculate SD\nSD_tissue_attached <- cell_fact_filtered %>%\n  group_by(hps, treatment_mg_per_L, simple_stage) %>%\n  summarise(SD_attached = round(sd(no_attached_tissue, na.rm = TRUE)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'hps', 'treatment_mg_per_L'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nn <- 4\n\nSE_tissue_attached <- SD_tissue_attached$SD_attached/ sqrt(n)\n# Print the calculated mean health scores\nprint(mean_tissue_attached)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 36 × 5\n# Groups:   hps, treatment_mg_per_L [12]\n     hps treatment_mg_per_L simple_stage mean_attached num_points\n   <int> <fct>              <chr>                <dbl>      <int>\n 1     0 0                  C                        4          2\n 2     0 0                  TO                       7          1\n 3     0 5                  B                        5          1\n 4     0 5                  C                        8          2\n 5     0 5                  TO                       6          1\n 6     0 45                 A                        5          1\n 7     0 45                 B                       10          1\n 8     0 45                 C                        7          1\n 9     0 45                 TO                       5          1\n10    18 0                  C                        4          2\n# ℹ 26 more rows\n```\n:::\n\n```{.r .cell-code}\nprint(SE_tissue_attached)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.5  NA  NA 0.5  NA  NA  NA  NA  NA 0.5  NA  NA 0.5  NA  NA  NA  NA  NA 0.5\n[20]  NA  NA 0.5  NA  NA  NA  NA  NA 0.5  NA  NA 0.5  NA  NA  NA  NA  NA\n```\n:::\n:::\n\n\nNumber of monolayer output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the mean \nmean_mono_out <- cell_fact_filtered %>%\n  group_by(hps, treatment_mg_per_L, simple_stage) %>%\n  summarise(no_mono = mean(no_mono_out, na.rm = TRUE),\n            num_points = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'hps', 'treatment_mg_per_L'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# Calculate SD and filter out groups with fewer than 2 observations\nSD_mono_out <- cell_fact_filtered %>%\n  group_by(hps, treatment_mg_per_L, simple_stage) %>%  \n  summarise(SD_mono = sd(no_mono_out, na.rm = TRUE),\n            num_points = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'hps', 'treatment_mg_per_L'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nn <- 4\n\nSE_mono <- SD_mono_out$SD_mono/ sqrt(n)\n# Print the calculated mean health scores\nprint(mean_mono_out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 36 × 5\n# Groups:   hps, treatment_mg_per_L [12]\n     hps treatment_mg_per_L simple_stage no_mono num_points\n   <int> <fct>              <chr>          <dbl>      <int>\n 1     0 0                  C                  0          2\n 2     0 0                  TO                 0          1\n 3     0 5                  B                  0          1\n 4     0 5                  C                  0          2\n 5     0 5                  TO                 0          1\n 6     0 45                 A                  0          1\n 7     0 45                 B                  0          1\n 8     0 45                 C                  0          1\n 9     0 45                 TO                 0          1\n10    18 0                  C                  0          2\n# ℹ 26 more rows\n```\n:::\n\n```{.r .cell-code}\nprint(SE_mono)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.0000000        NA        NA 0.0000000        NA        NA        NA\n [8]        NA        NA 0.0000000        NA        NA 0.3535534        NA\n[15]        NA        NA        NA        NA 0.0000000        NA        NA\n[22] 0.3535534        NA        NA        NA        NA        NA 0.0000000\n[29]        NA        NA 0.3535534        NA        NA        NA        NA\n[36]        NA\n```\n:::\n:::\n\n\nMonolayer output by relative tissue seeded (percent):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the mean \nmean_ratio_mono_out <- cell_fact_filtered %>%\n  group_by(hps, treatment_mg_per_L, simple_stage) %>%\n  summarise(percent_mean_mono = mean(percent_output, na.rm = TRUE),\n            num_points = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'hps', 'treatment_mg_per_L'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# Calculate SD and filter out groups with fewer than 2 observations\nSD_ratio_mono_out <- cell_fact_filtered %>%\n  group_by(hps, treatment_mg_per_L, simple_stage) %>%  \n  summarise(SD_ratio_mono = sd(percent_output, na.rm = TRUE),\n            num_points = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'hps', 'treatment_mg_per_L'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nn <- 4\n\nSE_mono_ratio <- SD_ratio_mono_out$SD_ratio_mono/ sqrt(n)\n# Print the calculated mean health scores\nprint(mean_ratio_mono_out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 36 × 5\n# Groups:   hps, treatment_mg_per_L [12]\n     hps treatment_mg_per_L simple_stage percent_mean_mono num_points\n   <int> <fct>              <chr>                    <dbl>      <int>\n 1     0 0                  C                            0          2\n 2     0 0                  TO                           0          1\n 3     0 5                  B                            0          1\n 4     0 5                  C                            0          2\n 5     0 5                  TO                           0          1\n 6     0 45                 A                            0          1\n 7     0 45                 B                            0          1\n 8     0 45                 C                            0          1\n 9     0 45                 TO                           0          1\n10    18 0                  C                            0          2\n# ℹ 26 more rows\n```\n:::\n\n```{.r .cell-code}\nprint(SE_mono_ratio)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.000000       NA       NA 0.000000       NA       NA       NA       NA\n [9]       NA 0.000000       NA       NA 4.419417       NA       NA       NA\n[17]       NA       NA 0.000000       NA       NA 4.419417       NA       NA\n[25]       NA       NA       NA 0.000000       NA       NA 4.419417       NA\n[33]       NA       NA       NA       NA\n```\n:::\n:::\n\n\n# Graphs\n\nBelow are graphs used in the SICB poster generated. Graph settings are set to be really large for printing and don't render well in this format so instead are figures with attached images of the produced graphs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# png(filename = \"line_percnet_output.png\", width = 1100, height = 700) \n##good for making a 7x5 in image for printing ~150 dpi\n\nggplot(data = mean_ratio_mono_out, aes(x = hps, y = percent_mean_mono, \n                                       color = simple_stage, linetype = treatment_mg_per_L)) +\n  theme_minimal() +\n  labs(x = \"Hours Post-Seeding\", y = \"Percent Monolayer Outputs\") +\n  geom_point() +\n  geom_line(size = 3) +  # Adjusted line thickness to 2\n  scale_color_manual(name = \"Stage\",\n                     values = c(\"#FFD92F\", \"#E78AC3\",  \"#8DA0CB\", \"#A6D854\"),  # Specify the colors\n                     labels = c(\"A\", \"B\", \"C\", \"TO\")) +  # Use fill instead of color in the legend\n  scale_linetype_manual(name = \"Treatment\",\n                        values = c(\"dotted\", \"dotdash\", \"solid\"),  # Example linetypes\n                        labels = c(\"Control\", \"5 mg/L\", \"45 mg/L\")) +\n  scale_x_continuous(breaks = seq(0, max(mean_ratio_mono_out$hps), by = 10), expand = c(0, 0)) +  # Adjust x-axis to start at 0\n  scale_y_continuous(expand = c(0, 0), breaks = c(0, 5, 10, 15, 20, 25), limits = c(0, 25)) +  # Adjust y-axis to start at 0\n  theme(legend.position = \"right\",\n        legend.margin = margin(1, 1, 1, 50),  # Adjusting the margin around the legend\n        axis.text = element_text(size = 30),\n        axis.title = element_text(size = 40),\n        legend.text = element_text(size = 30),\n        legend.title = element_text(size = 40),\n        plot.margin = margin(t = 2, r = 1, b = 1, l = 1, unit = \"cm\"),  # Adjust the top margin\n        legend.key.size = unit(4, \"lines\"),\n        panel.grid.major.x = element_line(color = \"darkgrey\", size = 0.5),  # Remove major vertical gridlines\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(color = \"darkgrey\", size = 0.5),\n        panel.grid.minor.y = element_blank())  # Adjust the size of legend keys for linetypes\n\n#dev.off()\n```\n:::\n\n\n![](line_percnet_output.png){fig-alt=\"Percent monolayer output over time.\" fig-align=\"center\" width=\"100%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#png(filename = \"mult_bar_plot_cell.png\", width = 1000, height = 900) \n## good for making a 3x3 in image for printing ~150 dpi\n\n# Create the ggplot with renamed hps values in facet_wrap\nggplot(mean_ratio_mono_out, aes(x = treatment_mg_per_L, y = percent_mean_mono, fill = stage_at_dissection)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", width = 0.9) +\n  scale_fill_brewer(palette = \"Set2\", name = \"Stage\") +\n  labs(x = \"Treatment (Nickel Chloride mg/L)\",\n       y = \"Percent Monolayer Output\") +\n  facet_wrap(~ hps, labeller = as_labeller(c(\"18\" = \"18 hps\", \"38\" = \"38 hps\", \"70\" = \"70 hps\"))) +\n  theme(axis.text=element_text(size=24),\n        axis.title=element_text(size=30),\n        legend.text = element_text(size = 30),\n        legend.title = element_text(size = 30),\n        strip.text = element_text(size = 30))  # Adjusted facet label font size\n\n#dev.off()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#png(filename = \"mult_bar_plot_cell_simple_stage.png\", width = 1000, height = 700) # good for making a 3x3 in image for printing ~150 dpi\n\n# Create the ggplot with renamed hps values in facet_wrap\nggplot(mean_ratio_mono_out, aes(x = treatment_mg_per_L, y = percent_mean_mono, fill = simple_stage)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", width = 0.9) +\n  scale_fill_manual(name = \"Stage\",\n                     values = c(\"#FFD92F\", \"#E78AC3\",  \"#8DA0CB\", \"#A6D854\"),  # Specify the colors\n                     labels = c(\"A\", \"B\", \"C\", \"TO\")) +\n  labs(x = \"Treatment (Nickel Chloride mg/L)\",\n       y = \"Percent Monolayer Output\") +\n  facet_wrap(~ hps, labeller = as_labeller(c(\"0\" = \"0 hps\", \"18\" = \"18 hps\", \"38\" = \"38 hps\", \"70\" = \"70 hps\"))) +\n  theme(axis.text=element_text(size=30),\n        axis.title=element_text(size=40),\n        legend.text = element_text(size = 40),\n        legend.title = element_text(size = 40),\n        strip.text = element_text(size = 40))  # Adjusted facet label font size\n\n#dev.off()\n```\n:::\n\n\nUsing facet_wrap you can get multi-panel plots.\n\n![](mult_bar_plot_cell_simple_stage.png){fig-alt=\"Multipanel plot example.\" fig-align=\"center\" width=\"100%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_tissue_attached_18hps <-mean_tissue_attached[mean_tissue_attached$hps == \"18\", ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# would need to modify mean_ratio_tissue at top to include stage_at_dissection with the full range of stages if you need to modify this plot, currently color codes do not match with other plots available regarding stage.\n\n#png(filename = \"cell_attached.png\", width = 1000, height = 900)\n\nggplot(mean_tissue_attached_18hps, aes(x = treatment_mg_per_L, y = mean_attached, fill = stage_at_dissection)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", width = 0.9) +\n  scale_fill_brewer(palette = \"Set2\", name = \"Stage\") +\n  labs(x = \"Treatment (Nickel Chloride mg/L)\",\n       y = \"Number of Attached Tissue\") +\n  theme_minimal() +\n  scale_y_continuous(breaks = c(0, 5, 10), limits = c(0, 10)) +\n  theme(panel.grid.major.x = element_blank(),  # Remove major vertical gridlines\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(color = \"darkgrey\", size = 1),\n        panel.grid.minor.y = element_line(color = \"darkgrey\", size = 0.5), \n        axis.text = element_text(size = 30),\n        axis.title = element_text(size = 40),\n        legend.text = element_text(size = 40),\n        legend.title = element_text(size = 40))\n\n #dev.off()  # Close the PNG device\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#png(filename = \"cell_attached_simple_stage.png\", width = 1000, height = 900)\n\nggplot(mean_tissue_attached_18hps, aes(x = treatment_mg_per_L, y = mean_attached, fill = simple_stage)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", width = 0.9) +\n   scale_fill_manual(name = \"Stage\",\n                     values = c(\"#FFD92F\", \"#E78AC3\",  \"#8DA0CB\", \"#A6D854\"),  # Specify the colors\n                     labels = c(\"A\", \"B\", \"C\", \"TO\")) +\n    labs(x = \"Treatment (Nickel Chloride mg/L)\",\n       y = \"Number of Attached Tissue\") +\n  theme_minimal() +\n  scale_y_continuous(breaks = c(0, 5, 10), limits = c(0, 10)) +\n  theme(panel.grid.major.x = element_blank(),  # Remove major vertical gridlines\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(color = \"darkgrey\", size = 1),\n        panel.grid.minor.y = element_line(color = \"darkgrey\", size = 0.5), \n        axis.text = element_text(size = 30),\n        axis.title = element_text(size = 40),\n        legend.text = element_text(size = 40),\n        legend.title = element_text(size = 40))\n\n#dev.off() \n```\n:::\n\n\n![](cell_attached_simple_stage.png){fig-alt=\"Number of tissue pieces adhered to plate at initiation of culturing by treatment and blastogenic stage.\" fig-align=\"center\" width=\"100%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#currently color scheme for stage is not consistent with other graphs\n\n# scale_fill_manual(name = \"Stage\",\n#                     values = c(\"#FFD92F\", \"#E78AC3\",  \"#8DA0CB\", \"#A6D854\"),  # Specify the colors\n#                     labels = c(\"A\", \"B\", \"C\", \"TO\")) +\n\n\n#png(filename = \"cell_attached_stacked_all.png\", width = 1000, height = 900)\n\nggplot(mean_tissue_attached_18hps, aes(x = treatment_mg_per_L, y = mean_attached, fill = stage_at_dissection)) +\n  geom_bar(stat = \"identity\", width = 0.9) +  # Remove position = \"dodge\" to make it stacked\n  scale_fill_brewer(palette = \"Set2\", name = \"Stage\") +\n  labs(x = \"Treatment (Nickel Chloride mg/L)\",\n       y = \"Number of Attached Tissue\") +\n  theme_minimal() +\n  scale_y_continuous(breaks = c(0, 5, 10, 15, 20, 25, 30), limits = c(0, 30)) +\n  theme(panel.grid.major.x = element_blank(),  # Remove major vertical gridlines\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(color = \"darkgrey\", size = 1),\n        panel.grid.minor.y = element_line(color = \"darkgrey\", size = 0.5), \n        axis.text = element_text(size = 30),\n        axis.title = element_text(size = 40),\n        legend.text = element_text(size = 40),\n        legend.title = element_text(size = 40))\n\n#dev.off()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#png(filename = \"cell_attached_stacked_all_simple_stage.png\", width = 1000, height = 900)\n\nggplot(mean_tissue_attached_18hps, aes(x = treatment_mg_per_L, y = mean_attached, fill = simple_stage)) +\n   geom_bar(stat = \"identity\", width = 0.9) +\n   scale_fill_manual(name = \"Stage\",\n                     values = c(\"#FFD92F\", \"#E78AC3\",  \"#8DA0CB\", \"#A6D854\"),  # Specify the colors\n                     labels = c(\"A\", \"B\", \"C\", \"TO\")) +\n   labs(x = \"Treatment (Nickel Chloride mg/L)\",\n        y = \"Number of Attached Tissue\") +\n   theme_minimal() +\n   scale_y_continuous(breaks = c(0, 5, 10, 15, 20, 25, 30), limits = c(0, 30)) +\n   theme(panel.grid.major.x = element_blank(),\n         panel.grid.minor.x = element_blank(),\n         panel.grid.major.y = element_line(color = \"darkgrey\", size = 1),\n         panel.grid.minor.y = element_line(color = \"darkgrey\", size = 0.5), \n         axis.text = element_text(size = 30),\n         axis.title = element_text(size = 40),\n         legend.text = element_text(size = 40),\n         legend.title = element_text(size = 40))\n#dev.off()\n```\n:::\n\n\n![](cell_attached_stacked_all_simple_stage.png){fig-alt=\"Number of tissue pieces adhered to plate at initiation of culturing by treatment and blastogenic stage. Stacked bars to get an idea of how much tissue was allotted to each treatment.\" fig-align=\"center\" width=\"100%\"}\n\nAverage tissue seeding density per well at initiation of culturing and SEM. Putting in caption of figure 3 for SICB.\n\n# Statistics\n\n### Determining significance in primary cell output by treatment and blastogenic stage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncell_18hps <- cell_fact_filtered[cell_fact_filtered$hps == 18, ]\n\nmean(cell_18hps$no_attached_tissue)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.090909\n```\n:::\n\n```{.r .cell-code}\nse <- (sd(cell_18hps$no_attached_tissue))/ sqrt(length(cell_18hps$hps))\nsd(cell_18hps$no_attached_tissue)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.972539\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Convert Treatment and HoursPostExposure to factors if they are not already factors\ncell_fact$treatment_mg_per_L <- as.factor(cell_fact$treatment_mg_per_L)\ncell_fact$hps <- as.factor(cell_fact$hps)\n\n\n## Perform two-way ANOVA\nanova_result <- aov(percent_output ~ treatment_mg_per_L + stage_at_dissection + treatment_mg_per_L:stage_at_dissection , data = cell_fact)\n\n# Summarize the ANOVA results\nsummary(anova_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                       Df Sum Sq Mean Sq F value  Pr(>F)   \ntreatment_mg_per_L                      2    405   202.5   1.766 0.18511   \nstage_at_dissection                     5   2839   567.9   4.954 0.00143 **\ntreatment_mg_per_L:stage_at_dissection  3    681   227.1   1.981 0.13369   \nResiduals                              37   4242   114.6                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\n## Meeting the ANOVA assumptions\nleveneTest(percent_output ~ stage_at_dissection*treatment_mg_per_L, data = cell_fact_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(>F)\ngroup 10  0.6135 0.7912\n      33               \n```\n:::\n\n```{.r .cell-code}\n#p-value > 0.05, therefore equal-variances are met\n\n\n# Check normality of residuals using Shapiro-Wilk test\nshapiro_test <- shapiro.test(residuals(anova_result))\nprint(shapiro_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tShapiro-Wilk normality test\n\ndata:  residuals(anova_result)\nW = 0.79282, p-value = 8.977e-07\n```\n:::\n\n```{.r .cell-code}\n#DOES NOT meet assumption of normality\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#================need to transform data, ===================\n## check for normality and homogenity again after this and rerun anova\n\np_prime <- log(cell_fact_filtered$percent_output +1)\n\ncell_fact2 <- cbind(cell_fact_filtered, p_prime)\n\nvar(cell_fact2$p_prime) # a ratio of less than 4 generally means you can assume equal variances as a rule of thumb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.803502\n```\n:::\n\n```{.r .cell-code}\nleveneTest(p_prime ~ treatment_mg_per_L*stage_at_dissection, data = cell_fact2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(>F)\ngroup 10  0.6015  0.801\n      33               \n```\n:::\n\n```{.r .cell-code}\n#p-value < 0.05, therefore equal-variances are not met again :( may be an issue with sample size\n\n\n\n## Perform two-way ANOVA\nanova_result2 <- aov(p_prime ~ treatment_mg_per_L + stage_at_dissection + treatment_mg_per_L:stage_at_dissection , data = cell_fact2)\n\n# Summarize the ANOVA results\nsummary(anova_result2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                       Df Sum Sq Mean Sq F value   Pr(>F)    \ntreatment_mg_per_L                      2   1.24   0.618   0.694    0.506    \nstage_at_dissection                     5  41.08   8.217   9.232 1.43e-05 ***\ntreatment_mg_per_L:stage_at_dissection  3   5.86   1.953   2.194    0.107    \nResiduals                              33  29.37   0.890                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\n# Check normality of residuals using Shapiro-Wilk test\nshapiro_test <- shapiro.test(residuals(anova_result2))\nprint(shapiro_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tShapiro-Wilk normality test\n\ndata:  residuals(anova_result2)\nW = 0.67709, p-value = 1.461e-08\n```\n:::\n\n```{.r .cell-code}\n# p less than 0.05, so my data is normally distributed now.\n\n\n## Perform Tukey's HSD test for significant interaction\n\ntukey_result <- TukeyHSD(x= anova_result2, ordered = TRUE, conf.level = 0.95)\nprint(tukey_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n    factor levels have been ordered\n\nFit: aov(formula = p_prime ~ treatment_mg_per_L + stage_at_dissection + treatment_mg_per_L:stage_at_dissection, data = cell_fact2)\n\n$treatment_mg_per_L\n           diff        lwr       upr     p adj\n5-0  0.34471457 -0.5393250 1.2287542 0.6088366\n45-0 0.40041554 -0.4836241 1.2844551 0.5139450\n45-5 0.05570096 -0.7627607 0.8741626 0.9847506\n\n$stage_at_dissection\n              diff         lwr      upr     p adj\nB1-A2 9.436896e-16 -2.01699358 2.016994 1.0000000\nB2-A2 5.570096e-02 -1.96129262 2.072695 0.9999994\nC1-A2 2.280583e-01 -1.51870943 1.974826 0.9986436\nC2-A2 1.484441e+00 -0.16242743 3.131309 0.0969222\nTO-A2 2.312819e+00  0.66595066 3.959687 0.0021238\nB2-B1 5.570096e-02 -1.96129262 2.072695 0.9999994\nC1-B1 2.280583e-01 -1.51870943 1.974826 0.9986436\nC2-B1 1.484441e+00 -0.16242743 3.131309 0.0969222\nTO-B1 2.312819e+00  0.66595066 3.959687 0.0021238\nC1-B2 1.723573e-01 -1.57441039 1.919125 0.9996512\nC2-B2 1.428740e+00 -0.21812840 3.075608 0.1199378\nTO-B2 2.257118e+00  0.61024969 3.903986 0.0028190\nC2-C1 1.256383e+00 -0.04558108 2.558346 0.0636541\nTO-C1 2.084761e+00  0.78279701 3.386725 0.0003932\nTO-C2 8.283781e-01 -0.33613369 1.992890 0.2874634\n\n$`treatment_mg_per_L:stage_at_dissection`\n                    diff        lwr      upr     p adj\n5:C1-45:A2  5.956991e-16 -2.5180296 2.518030 1.0000000\n45:B1-45:A2 1.023961e-15 -2.5180296 2.518030 1.0000000\n5:B2-45:A2  1.268284e-15 -2.5180296 2.518030 1.0000000\n0:C1-45:A2  1.497755e-15 -2.5180296 2.518030 1.0000000\n0:C2-45:A2  1.719800e-15 -2.5180296 2.518030 1.0000000\n5:C2-45:A2  1.952017e+00 -0.5660123 4.470047 0.2915768\n0:TO-45:A2  2.045189e+00 -0.4728406 4.563219 0.2273221\n45:C2-45:A2 2.045189e+00 -0.4728406 4.563219 0.2273221\n5:TO-45:A2  2.153760e+00 -0.3642699 4.671789 0.1661741\n45:TO-45:A2 2.283392e+00 -0.2346378 4.801421 0.1110225\n0:A2-45:A2            NA         NA       NA        NA\n5:A2-45:A2            NA         NA       NA        NA\n0:B1-45:A2            NA         NA       NA        NA\n5:B1-45:A2            NA         NA       NA        NA\n0:B2-45:A2            NA         NA       NA        NA\n45:B2-45:A2           NA         NA       NA        NA\n45:C1-45:A2           NA         NA       NA        NA\n45:B1-5:C1  4.282622e-16 -2.5180296 2.518030 1.0000000\n5:B2-5:C1   6.725851e-16 -2.5180296 2.518030 1.0000000\n0:C1-5:C1   9.020562e-16 -2.5180296 2.518030 1.0000000\n0:C2-5:C1   1.124101e-15 -2.5180296 2.518030 1.0000000\n5:C2-5:C1   1.952017e+00 -0.5660123 4.470047 0.2915768\n0:TO-5:C1   2.045189e+00 -0.4728406 4.563219 0.2273221\n45:C2-5:C1  2.045189e+00 -0.4728406 4.563219 0.2273221\n5:TO-5:C1   2.153760e+00 -0.3642699 4.671789 0.1661741\n45:TO-5:C1  2.283392e+00 -0.2346378 4.801421 0.1110225\n0:A2-5:C1             NA         NA       NA        NA\n5:A2-5:C1             NA         NA       NA        NA\n0:B1-5:C1             NA         NA       NA        NA\n5:B1-5:C1             NA         NA       NA        NA\n0:B2-5:C1             NA         NA       NA        NA\n45:B2-5:C1            NA         NA       NA        NA\n45:C1-5:C1            NA         NA       NA        NA\n5:B2-45:B1  2.443229e-16 -2.5180296 2.518030 1.0000000\n0:C1-45:B1  4.737940e-16 -2.5180296 2.518030 1.0000000\n0:C2-45:B1  6.958386e-16 -2.5180296 2.518030 1.0000000\n5:C2-45:B1  1.952017e+00 -0.5660123 4.470047 0.2915768\n0:TO-45:B1  2.045189e+00 -0.4728406 4.563219 0.2273221\n45:C2-45:B1 2.045189e+00 -0.4728406 4.563219 0.2273221\n5:TO-45:B1  2.153760e+00 -0.3642699 4.671789 0.1661741\n45:TO-45:B1 2.283392e+00 -0.2346378 4.801421 0.1110225\n0:A2-45:B1            NA         NA       NA        NA\n5:A2-45:B1            NA         NA       NA        NA\n0:B1-45:B1            NA         NA       NA        NA\n5:B1-45:B1            NA         NA       NA        NA\n0:B2-45:B1            NA         NA       NA        NA\n45:B2-45:B1           NA         NA       NA        NA\n45:C1-45:B1           NA         NA       NA        NA\n0:C1-5:B2   2.294711e-16 -2.5180296 2.518030 1.0000000\n0:C2-5:B2   4.515157e-16 -2.5180296 2.518030 1.0000000\n5:C2-5:B2   1.952017e+00 -0.5660123 4.470047 0.2915768\n0:TO-5:B2   2.045189e+00 -0.4728406 4.563219 0.2273221\n45:C2-5:B2  2.045189e+00 -0.4728406 4.563219 0.2273221\n5:TO-5:B2   2.153760e+00 -0.3642699 4.671789 0.1661741\n45:TO-5:B2  2.283392e+00 -0.2346378 4.801421 0.1110225\n0:A2-5:B2             NA         NA       NA        NA\n5:A2-5:B2             NA         NA       NA        NA\n0:B1-5:B2             NA         NA       NA        NA\n5:B1-5:B2             NA         NA       NA        NA\n0:B2-5:B2             NA         NA       NA        NA\n45:B2-5:B2            NA         NA       NA        NA\n45:C1-5:B2            NA         NA       NA        NA\n0:C2-0:C1   2.220446e-16 -2.5180296 2.518030 1.0000000\n5:C2-0:C1   1.952017e+00 -0.5660123 4.470047 0.2915768\n0:TO-0:C1   2.045189e+00 -0.4728406 4.563219 0.2273221\n45:C2-0:C1  2.045189e+00 -0.4728406 4.563219 0.2273221\n5:TO-0:C1   2.153760e+00 -0.3642699 4.671789 0.1661741\n45:TO-0:C1  2.283392e+00 -0.2346378 4.801421 0.1110225\n0:A2-0:C1             NA         NA       NA        NA\n5:A2-0:C1             NA         NA       NA        NA\n0:B1-0:C1             NA         NA       NA        NA\n5:B1-0:C1             NA         NA       NA        NA\n0:B2-0:C1             NA         NA       NA        NA\n45:B2-0:C1            NA         NA       NA        NA\n45:C1-0:C1            NA         NA       NA        NA\n5:C2-0:C2   1.952017e+00 -0.5660123 4.470047 0.2915768\n0:TO-0:C2   2.045189e+00 -0.4728406 4.563219 0.2273221\n45:C2-0:C2  2.045189e+00 -0.4728406 4.563219 0.2273221\n5:TO-0:C2   2.153760e+00 -0.3642699 4.671789 0.1661741\n45:TO-0:C2  2.283392e+00 -0.2346378 4.801421 0.1110225\n0:A2-0:C2             NA         NA       NA        NA\n5:A2-0:C2             NA         NA       NA        NA\n0:B1-0:C2             NA         NA       NA        NA\n5:B1-0:C2             NA         NA       NA        NA\n0:B2-0:C2             NA         NA       NA        NA\n45:B2-0:C2            NA         NA       NA        NA\n45:C1-0:C2            NA         NA       NA        NA\n0:TO-5:C2   9.317175e-02 -2.4248579 2.611201 1.0000000\n45:C2-5:C2  9.317175e-02 -2.4248579 2.611201 1.0000000\n5:TO-5:C2   2.017425e-01 -2.3162872 2.719772 1.0000000\n45:TO-5:C2  3.313746e-01 -2.1866550 2.849404 1.0000000\n0:A2-5:C2             NA         NA       NA        NA\n5:A2-5:C2             NA         NA       NA        NA\n0:B1-5:C2             NA         NA       NA        NA\n5:B1-5:C2             NA         NA       NA        NA\n0:B2-5:C2             NA         NA       NA        NA\n45:B2-5:C2            NA         NA       NA        NA\n45:C1-5:C2            NA         NA       NA        NA\n45:C2-0:TO  4.440892e-16 -2.5180296 2.518030 1.0000000\n5:TO-0:TO   1.085707e-01 -2.4094589 2.626600 1.0000000\n45:TO-0:TO  2.382028e-01 -2.2798268 2.756232 1.0000000\n0:A2-0:TO             NA         NA       NA        NA\n5:A2-0:TO             NA         NA       NA        NA\n0:B1-0:TO             NA         NA       NA        NA\n5:B1-0:TO             NA         NA       NA        NA\n0:B2-0:TO             NA         NA       NA        NA\n45:B2-0:TO            NA         NA       NA        NA\n45:C1-0:TO            NA         NA       NA        NA\n5:TO-45:C2  1.085707e-01 -2.4094589 2.626600 1.0000000\n45:TO-45:C2 2.382028e-01 -2.2798268 2.756232 1.0000000\n0:A2-45:C2            NA         NA       NA        NA\n5:A2-45:C2            NA         NA       NA        NA\n0:B1-45:C2            NA         NA       NA        NA\n5:B1-45:C2            NA         NA       NA        NA\n0:B2-45:C2            NA         NA       NA        NA\n45:B2-45:C2           NA         NA       NA        NA\n45:C1-45:C2           NA         NA       NA        NA\n45:TO-5:TO  1.296321e-01 -2.3883975 2.647662 1.0000000\n0:A2-5:TO             NA         NA       NA        NA\n5:A2-5:TO             NA         NA       NA        NA\n0:B1-5:TO             NA         NA       NA        NA\n5:B1-5:TO             NA         NA       NA        NA\n0:B2-5:TO             NA         NA       NA        NA\n45:B2-5:TO            NA         NA       NA        NA\n45:C1-5:TO            NA         NA       NA        NA\n0:A2-45:TO            NA         NA       NA        NA\n5:A2-45:TO            NA         NA       NA        NA\n0:B1-45:TO            NA         NA       NA        NA\n5:B1-45:TO            NA         NA       NA        NA\n0:B2-45:TO            NA         NA       NA        NA\n45:B2-45:TO           NA         NA       NA        NA\n45:C1-45:TO           NA         NA       NA        NA\n5:A2-0:A2             NA         NA       NA        NA\n0:B1-0:A2             NA         NA       NA        NA\n5:B1-0:A2             NA         NA       NA        NA\n0:B2-0:A2             NA         NA       NA        NA\n45:B2-0:A2            NA         NA       NA        NA\n45:C1-0:A2            NA         NA       NA        NA\n0:B1-5:A2             NA         NA       NA        NA\n5:B1-5:A2             NA         NA       NA        NA\n0:B2-5:A2             NA         NA       NA        NA\n45:B2-5:A2            NA         NA       NA        NA\n45:C1-5:A2            NA         NA       NA        NA\n5:B1-0:B1             NA         NA       NA        NA\n0:B2-0:B1             NA         NA       NA        NA\n45:B2-0:B1            NA         NA       NA        NA\n45:C1-0:B1            NA         NA       NA        NA\n0:B2-5:B1             NA         NA       NA        NA\n45:B2-5:B1            NA         NA       NA        NA\n45:C1-5:B1            NA         NA       NA        NA\n45:B2-0:B2            NA         NA       NA        NA\n45:C1-0:B2            NA         NA       NA        NA\n45:C1-45:B2           NA         NA       NA        NA\n```\n:::\n\n```{.r .cell-code}\n### still fails assumptions of homogenity for an anova so we need to try a non-parametric statistical test\n```\n:::\n\n\nNote that the sample size is so small that it fails to meet the assumptions of homogenity and a full statistical analysis of the data cannot be complete.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}