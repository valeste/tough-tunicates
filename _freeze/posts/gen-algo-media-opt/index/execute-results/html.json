{
  "hash": "59a7f482e0e1431304f5234ef7a5298a",
  "result": {
    "markdown": "---\ntitle: \"Use of Genetic Algorithm in Cell Culture Media Optimization\"\nauthor: \"Celeste Valdivia\"\ndate: \"2023-10-28\"\ncategories: [cool paper, optimization]\nimage: \"v3_design.jpeg\"\n---\n\n\n# Genetic algorithm for cell culture optimization\n\n\n```{mermaid}\nflowchart LR\n  A(start) --> B[create random initial 'population' of experimental conditions]\n  B --> C[perform wet lab experiments]\n  C --> D[evaluate fitness of each conditions (10^6^ cells in monolayer formation)]\n  D --> E{Optimization goal achieved/generation limit reached?}\n  E --> F[No, select better performing conditions proportional to fitness]\n  F --> H[Create next generation of conditions by cross over and mutation]\n  E --> G[Yes, end]\n```\n\n```{mermaid}\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice->>John: Hello John, how are you?\n  loop Healthcheck\n    John->>John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts <br/>prevail!\n  John-->>Alice: Great!\n  John->>Bob: How about you?\n  Bob-->>John: Jolly good!\n```\n\n\n::: callout-note\n## Citations\n\nMunroe, S., K. Sandoval, D. E. Martens, D. Sipkema, and S. A. Pomponi. 2019. Genetic algorithm as an optimization tool for the development of sponge cell culture media. In Vitro Cellular & Developmental Biology - Animal 55:149--158.\n:::\n\n\n\n# R Based Genetic Algorithm\n\n[genalg R package documentation](https://cran.r-project.org/web/packages/genalg/genalg.pdf)\n\n## Example code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the genalg package\nlibrary(genalg)\n\n# Define the objective function to minimize\n# The objective function should take a vector representing concentrations as input\nobjective_function <- function(concentrations) {\n  # Simulate the effect of concentrations on a specific metric (e.g., cell growth)\n  # You will need to replace this with your own experimental data and evaluation logic\n  metric_value <- simulated_metric(concentrations)\n  return(metric_value)\n}\n\n# Set GA parameters\npopulation_size <- 50\ngenerations <- 100\nmutation_rate <- 0.1\n\n# Define the range of concentrations for each component\n# This can be customized based on your specific components\nconcentration_range <- matrix(c(0, 1), nrow = 1, ncol = 10)\n\n# Create an initial random population of concentrations within the defined range\ninitial_population <- rbga.bin(size = 10, popSize = population_size, iters = 1, \n                               mutationChance = mutation_rate, levels = concentration_range)\n\n# Run the genetic algorithm\nresult <- rbga.bin(size = 10, popSize = population_size, iters = generations,\n                   mutationChance = mutation_rate, evalFunc = objective_function,\n                   levels = concentration_range, pType = \"real-valued\", initial = initial_population$solutions)\n\n# Print the best solution found (optimized concentrations)\ncat(\"Best solution (optimized concentrations):\", result$solution, \"\\n\")\ncat(\"Objective value (metric value):\", result$evaluations, \"\\n\")\n```\n:::\n\n\n### Brainstorming the objective to feed the algorithm\n\nNote that it is possible to have a multi-objective optimization framework, however this can be more challenging than a single-objective optimization. The optimization algorithm will seek a set of solutions that represent trade-offs between these objectives. The solutions are known as the Pareto front.\n\nIf you do more than one objective, you will need to assign weights or priorities to each objective function.\n\n1.  Cell density of at least 10^6^, the minimum required amount to conduct gene expression work.\n\n2. Frequency of monolayer formation for epithelial tissue from Botryllus schlosseri.\n\n3. Mitochondrial activity assessed using the 96 well plate reader.\n\n### Brainstorming factors that are present in the media and what would potentially be changed\n\n1. Fetal Bovine Serum\n\n2. L-15 Media Basal\n\n3. HEPES Buffer\n\n4. Penicillin-Streptomycin\n\n5. Amphotericn B\n\n6. Artificial Seawater\n\n7. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}